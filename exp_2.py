# -*- coding: utf-8 -*-
"""EXP 2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YNm7-u3zu7AI80SUmMwxW5qGUUvbx7bQ
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
df = pd.read_csv('Titanic.csv')
print(df.head())
print(df.info())
print(df.isnull().sum())

df['Age_ffill'] = df['Age'].fillna(method='ffill')
df['Age_bfill'] = df['Age'].fillna(method='bfill')

df['Cabin'] = df['Cabin'].fillna(value='unknown', limit=5)

print("Duplicates before:", df.duplicated().sum())
df.drop_duplicates(inplace=True)
print("Duplicates after:", df.duplicated().sum())

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
df['Sex_encoded'] = le.fit_transform(df['Sex'])

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
df['Fare_scaled'] = scaler.fit_transform(df[['Fare']])

corr_matrix = df[['Pclass', 'Age', 'SibSp', 'Parch', 'Fare']].corr()
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm')
plt.title('Correlation Heatmap')
plt.show()

female_survivors = df[(df['Sex'] == 'female') & (df['Survived'] == 1)]
print("\n7. Female passengers who survived:")
print(female_survivors[['Name', 'Sex', 'Survived']])

young_3rd_class = df[(df['Pclass'] == 3) & (df['Age'] < 18)]
print("\n8. Passengers in 3rd class and under the age of 18:")
print(young_3rd_class[['Name', 'Pclass', 'Age']])

class1_older40 = df[(df['Pclass'] == 1) & (df['Age'] > 40)]
print("\n9. Passengers in Class 1 and older than 40:")
print(class1_older40[['Name', 'Pclass', 'Age']])

class1_older40_survived = class1_older40[class1_older40['Survived'] == 1]
print("\n10. Survived passengers in Class 1 and older than 40:")
print(class1_older40_survived[['Name', 'Pclass', 'Age', 'Survived']])

rich_males = df[(df['Sex'] == 'male') & (df['Fare'] > 100)]
print("\n11. Male passengers who paid a fare greater than 100:")
print(rich_males[['Name', 'Sex', 'Fare']])

embarked_C_class2 = df[(df['Embarked'] == 'C') & (df['Pclass'] == 2)]
print("\n12. Passengers who embarked from 'C' and were in Class 2:")
print(embarked_C_class2[['Name', 'Embarked', 'Pclass']])

sibsp_more_than2 = df[df['SibSp'] > 2]
print("\n13. Passengers with more than 2 siblings/spouses aboard:")
print(sibsp_more_than2[['Name', 'SibSp']])

no_family_no_survive = df[(df['Survived'] == 0) & (df['SibSp'] == 0) & (df['Parch'] == 0)]
print("\n14. Passengers who did not survive and had no family aboard:")
print(no_family_no_survive[['Name', 'Survived', 'SibSp', 'Parch']])

oldest_survivors = df[df['Survived'] == 1].sort_values(by='Age', ascending=False).head(5)
print("\n15. Top 5 oldest passengers who survived:")
print(oldest_survivors[['Name', 'Age', 'Survived']])

zero_fare_passengers = df[df['Fare'] == 0]
print("\n16. Passengers who paid zero fare:")
print(zero_fare_passengers[['Name', 'Fare']])

from sklearn.model_selection import train_test_split

train_data, test_data = train_test_split(df, test_size=0.2, random_state=42)
print("\n17. Dataset split into training and testing:")
print("Training Set Size:", train_data.shape)
print("Testing Set Size:", test_data.shape)