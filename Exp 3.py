# -*- coding: utf-8 -*-
"""Untitled13.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1S99yDlRnkmMziw0vZ0wDsNGsGf-HSuQD
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures, StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.svm import SVR
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.cluster import KMeans
df = pd.read_csv("Advertising.csv")
print(df.info())
print(df.isnull().sum())
X = df[['TV', 'Radio', 'Newspaper']]
y = df['Sales']
sns.pairplot(df[['TV', 'Radio', 'Newspaper', 'Sales']])
plt.show()
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)
lr = LinearRegression()
lr.fit(X_train, y_train)
pred_lr = lr.predict(X_test)
poly_model = Pipeline([
    ('poly', PolynomialFeatures(degree=2)),
    ('lr', LinearRegression())
])
poly_model.fit(X_train, y_train)
pred_poly = poly_model.predict(X_test)
svr_model = Pipeline([
    ('scale', StandardScaler()),
    ('svr', SVR(kernel='rbf'))
])
svr_model.fit(X_train, y_train)
pred_svr = svr_model.predict(X_test)
def evaluate(y_true, y_pred):
    mae = mean_absolute_error(y_true, y_pred)
    mse = mean_squared_error(y_true, y_pred)
    rmse = np.sqrt(mse)
    return mae, mse, rmse

lr_scores = evaluate(y_test, pred_lr)
poly_scores = evaluate(y_test, pred_poly)
svr_scores = evaluate(y_test, pred_svr)
results = pd.DataFrame({
    'Model': ['Linear', 'Polynomial', 'SVR'],
    'MAE': [lr_scores[0], poly_scores[0], svr_scores[0]],
    'MSE': [lr_scores[1], poly_scores[1], svr_scores[1]],
    'RMSE': [lr_scores[2], poly_scores[2], svr_scores[2]]
})
results.set_index("Model")[["MAE", "MSE", "RMSE"]].plot(kind="bar")
plt.title("Model Evaluation")
plt.ylabel("Error")
plt.xticks(rotation=0)
plt.show()
kmeans = KMeans(n_clusters=3, random_state=0)
df["Cluster"] = kmeans.fit_predict(X)
sns.scatterplot(data=df, x="TV", y="Sales", hue="Cluster", palette="Set2")
plt.title("K-Means Clustering: TV vs Sales")
plt.show()